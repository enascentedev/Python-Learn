# criar_estrutura_estudos.py

import os

# Nome da pasta raiz do projeto
base_dir = "base_estudos_python"

# Estrutura de subpastas com roteiros personalizados
roteiros = {
    "fundamentos": [
        "Sintaxe b√°sica e identa√ß√£o",
        "Tipos primitivos (int, float, str, bool)",
        "Operadores (aritm√©ticos, l√≥gicos, compara√ß√£o)",
        "Estruturas de controle: if, else, elif",
        "La√ßos: for, while, break, continue",
        "Fun√ß√µes e escopo de vari√°veis",
        "Bloco with e gerenciamento de contexto",
        "Conceito de __name__ == '__main__'",
        "Entrada e sa√≠da de dados",
    ],
    "poo": [
        "Conceitos de classe e objeto",
        "Atributos e m√©todos",
        "Encapsulamento",
        "Heran√ßa e polimorfismo",
        "M√©todos especiais (__init__, __str__, etc)",
        "Boas pr√°ticas com POO em Python",
    ],
    "estrutura_dados": [
        "Listas e tuplas",
        "Dicion√°rios e conjuntos (sets)",
        "Itera√ß√£o e manipula√ß√£o de cole√ß√µes",
        "List comprehension",
        "Fun√ß√µes √∫teis: zip, enumerate, map, filter",
    ],
    "manipulacao_arquivos": [
        "Leitura e escrita em arquivos .txt",
        "Manipula√ß√£o de arquivos CSV com open",
        "Leitura e escrita em arquivos JSON",
        "Uso de with para arquivos",
    ],
    "modulos_builtins": [
        "M√≥dulo os",
        "M√≥dulo sys",
        "M√≥dulo datetime",
        "M√≥dulo pathlib",
        "Importa√ß√µes e aliases",
    ],
    "bibliotecas_populares": [
        "pandas: leitura, manipula√ß√£o e exporta√ß√£o de dados",
        "openpyxl e xlsxwriter: escrita em Excel",
        "requests: consumo de APIs REST",
        "dotenv: vari√°veis de ambiente",
    ],
    "automacoes": [
        "Gerar relat√≥rios em Excel a partir de dados SQL",
        "Enviar e-mails com anexos e HTML",
        "Automatizar execu√ß√£o com pyodbc + pandas",
        "Uso de agendamentos via Airflow",
    ],
    "sql_com_python": [
        "Conex√£o com SQL Server usando pyodbc",
        "Execu√ß√£o de queries com pandas.read_sql",
        "Gera√ß√£o de relat√≥rios com filtros",
        "Valida√ß√£o de dados retornados",
        "Debug de dados vazios ou inconsistentes",
    ],
    "flask_api": [
        "Cria√ß√£o de rotas b√°sicas",
        "Uso de m√©todos GET, POST",
        "Retorno em JSON",
        "Conex√£o com SQL e uso em APIs",
        "Boas pr√°ticas de organiza√ß√£o",
    ],
    "django_api": [
        "Cria√ß√£o de projetos e apps",
        "Modelos com ORM",
        "Views e rotas de API",
        "Integra√ß√£o com banco",
        "Documenta√ß√£o com DRF",
    ],
    "airflow": [
        "O que √© e como instalar o Airflow",
        "Cria√ß√£o de DAGs e tarefas",
        "Uso de BashOperator e PythonOperator",
        "Uso de TaskGroup e .expand()",
        "Leitura de vari√°veis com airflow.models.Variable",
        "Envio de e-mails com HTML",
        "Execu√ß√£o de queries SQL e gera√ß√£o de Excel",
        "Migra√ß√£o de scripts para DAGs",
        "Agendamento e depura√ß√£o de DAGs",
    ],
    "testes": [
        "Introdu√ß√£o ao pytest",
        "Escrevendo testes simples",
        "Estrutura de testes em projetos",
        "Testes de API com requests",
        "Cobertura e boas pr√°ticas",
    ],
    "boas_praticas": [
        "Uso do PEP8",
        "Tipagem com type hints",
        "Estrutura de projeto em camadas",
        "Uso de logging",
        "Nomenclatura e legibilidade",
    ],
    "snippets": [
        "Trechos de c√≥digo √∫teis para consulta r√°pida",
        "Exemplos de manipula√ß√£o de datas",
        "Conex√£o com banco",
        "Envio de e-mails",
        "Formata√ß√£o de planilhas",
    ],
    "referencias": [
        "Links √∫teis",
        "Zettelkasten com conceitos importantes",
        "Tutoriais e artigos salvos",
    ],
    "debugging": [
        "Uso do debugger no VS Code",
        "Breakpoints e inspe√ß√£o de vari√°veis",
        "An√°lise da pilha de chamadas",
        "Erros comuns e como investigar",
    ],
    "ambientes_virtualenv": [
        "Como criar ambientes virtuais com venv",
        "Instala√ß√£o de depend√™ncias com pip",
        "Uso de requirements.txt",
        "Isolamento de ambientes",
    ],
    "scripts_docker": [
        "Cria√ß√£o de Dockerfile",
        "Uso de docker-compose para SQL Server e Airflow",
        "Execu√ß√£o de projetos com containers",
        "Evitar depend√™ncias locais",
    ],
    "exploracoes_ai": [
        "Introdu√ß√£o ao Langchain",
        "Automa√ß√£o com n8n",
        "Cria√ß√£o de fluxos com IA",
        "Casos de uso com Python + IA",
    ],
    "documentacao_projetos": [
        "api_contabilidade: fluxo e queries",
        "Sistema de avalia√ß√£o: modelagem + views",
        "Relat√≥rio horas pendentes: l√≥gica e envio",
        "DAGs criadas e objetivos de cada uma",
        "Notas de migra√ß√£o",
    ],
}


# Fun√ß√£o para criar conte√∫do do README
def criar_readme(nome_pasta, topicos):
    nome_formatado = nome_pasta.replace("_", " ").title()
    roteiro = "\n".join(f"- [ ] {item}" for item in topicos)
    conteudo = f"""# üìò {nome_formatado}

## üß≠ Roteiro de Estudos

{roteiro}

## üìÇ O que voc√™ vai encontrar aqui

- Exemplos pr√°ticos
- Exerc√≠cios com dicas
- Anota√ß√µes pessoais e d√∫vidas resolvidas

## üîç Busca r√°pida (palavras-chave)

<!-- {nome_pasta}, estudo, python, exemplos -->

## üìö Refer√™ncias oficiais

- [Documenta√ß√£o Python 3.10.10](https://docs.python.org/3.10/)
"""
    return conteudo


# Fun√ß√£o para criar estrutura de pastas e arquivos
def criar_estrutura(base, roteiro_dict):
    os.makedirs(base, exist_ok=True)
    for pasta, topicos in roteiro_dict.items():
        caminho = os.path.join(base, pasta)
        os.makedirs(caminho, exist_ok=True)
        readme_path = os.path.join(caminho, "README.md")
        with open(readme_path, "w", encoding="utf-8") as f:
            f.write(criar_readme(pasta, topicos))
            print(f"‚úÖ Criado: {readme_path}")


# Executar
if __name__ == "__main__":
    criar_estrutura(base_dir, roteiros)
